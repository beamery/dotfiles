Lecture 6 - Modules, Standard Library

 • Python Module = .py file
 • Why write a module?
    ◦ Maximize code reuse / minimize code redundancy
    ◦ Organize code clearly (group related definitions)
    ◦ Make testable units of code
    ◦ Share data among separate script parts
    ◦ (Does this look familiar?)
 • Importing a Module
    ◦ import module_name
    ◦ Looks up or else creates a module object
    ◦ When you import a module, you execute any top-level code it contains
 • Accessing Module Parts
    ◦ Same as accessing parts of an object
    ◦ Becuase a module is an object

 • Standard Library
    ◦ Built-in Functions
       ▸ Sorting
          ▸ list.sort(cmp, key, reverse)
             ▹ sorts in place
          ▸ sorted.(list, cmp, key, reverse)
             ▹ Sort any iterable object and make new list object
       ▸ Transforming
          ▹ map(function, iterable)
             ▪ Applies the function to every item in the iterable and returns a list with the results
             ▪ If function takes ‘x’ arguments, you need to supply ‘x’ iterables
       ▸ Filtering
          ▹ filter(function, iterable)
             ▪ returns items that satisfy the function condition
       ▸ Decimal
          ▹ Does exact decimal floating point math
          ▹ Has prg and cons compared to regular floats
          ▹ Very useful for fixed-decimal math
             ▪ ex. 0.1 + 0.1 + 0.1 - 0.3 regularly returns 5.55e-17
       ▸ Dates and Times
          ▹ time
             ▪ time.time()
                ▫ number of seconds since the epoch
             ▪ time.asctime()
                ▫ ‘Sun Oct 23 15:36:51 2011’
             ▪ time.strftime(‘%d %B %Y - %H:%M’)
                ▫ 23 October 2011 - 15:36
          ▹ datetime
             ▪ Complex set of classes for date/time calculations
                ▫ start = datetime.now()
                ▫ wait = timedleta(weeks=1, hours=8)
          ▹ calendar
             ▪ Mostly for printing fixed-width text calendars
             ▪ Does a few other date calculations
          ▹ CSV
             ▪ Used by Excel and others
             ▪ Wildly inconsistent, non-standard format
             ▪ Hard to parse yourself
             ▪ Can offer hints as to particular CSV format
          ▹ fnmatch
             ▪ filename match
          ▹ glob
             ▪ Acts like shell wildcards
             ▪ Uses fnmatch for implementation
          ▹ sys
          ▹ os
             ▪ os.path
          ▹ shutil
             ▪ rmtree
                   ▫ removes an entire directory and its subdirectories

