Lecture 2 - Basic Syntax

 • From Interactive to Scripts
    ◦ Numbers/strings and operations form expressions
    ◦ Python computes the value of an expression
 • print
    ◦ Prints a value (to standard output)
    ◦ Spearate items with womma (prints space in between)
    ◦ Prints newline at end
       ▸ Suppress newline with trailing comma
 • Hello World

   #!/usr/bin/python

   # This line is a comment
   print ‘Hello, world!’

   # Continued line (put nothing after \)
   print ‘2pi = ‘ + \
      str(2.0 * 3.14159) # 2 * pi

 • Variables
    ◦ Create by assigning a value
    ◦ Must create before use
    ◦ Subsequent assignment changes value
    ◦ Replace with current value when used
    ◦ Dynamically typed
       ▸ Variables are not declared with a type
       ▸ Can reassign any type into a variable
 • Python Object Model
    ◦ All variables refer to objects
    ◦ Objects = Data (in memory) + Operations
    ◦ Assignment binds a variable name to an object
    ◦ Types live in objects, not variables
    ◦ No more references? Python can remove the object
 • Types
    ◦ type(object)
    ◦ Python can tell you the type of an object
    ◦ Example of intrgpection

   type(42) → <type ‘int’>
   type(3.14) → <type ‘float’>
   type(‘hi’) → <type ‘str’>

   x = 5.0 / 2
   type(x)  → <type ‘float’>

   type(type(42)) → <type ‘type’>

 • None
    ◦ Equivalent to null
       ▸ x = None
    ◦ Special object which means “no value”
    ◦ In Python, still an object

Built-in Help
 • dir(object or type)
    ◦ Lists all operations for that object or type
    ◦ object.operation(...)
 • help(something)
    ◦ Shows built-in documentation
    ◦ Works on objects, types, and their operations

Assignment
 • a = 42
 • a += 1
 • a -= 3
 • a *= 2
 • a /= 8
 • a += 1 is slightly more efficient than a = a + 1
 • += and *= work on strings too

Basic Input
 • raw_input
    ◦ Gets input from user
    ◦ Strips trailing newline automatically
    ◦ Always gets a string — convert if needed

Booleans
 • True — False
    ◦ must be capitalized
    ◦ type is ‘bool’
 • Boolean Operations
    ◦ not x
    ◦ x or y
    ◦ x and y
 • Comparison Operators
    ◦ ==
    ◦ !=
    ◦ is 
       ▸ same object
    ◦ is not
       ▸ not same object
    ◦ <
    ◦ >
    ◦ <=
    ◦ >=
    ◦ All comparison operations yield a Boolean
    ◦ Use is/is not with None, True, and False
    ◦ Can chain inequalities
       ▸ 1 < x <= 4
 • Conditionals

   if condition:
      # do something
   elif condition:
      # do something else
   else:
      # do something more

    ◦ If you don’t want to do anything, use ‘pass’
 • Basic Loop

   while condition:
      # do stuff
      if condition-a:
         continue # return to beginning of loop
      if condition-b:
         break # exits loop
      # more stuff

Other Scripting languages
 • Check for different or additional
 • Literals(/, true/false, etc)

