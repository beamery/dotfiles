Lecture 13 - Scientific Python

 • Efficiency of Python
    ◦ Python vs. C, C++, Fortran
    ◦ Examples:
       ▸ Math programs (e.g. prime number checking)
          ▹ Similar length programs
          ▹ C can be 20x faster
       ▸ Word frequency counting
          ▹ C would be much longer
          ▹ C is probably still faster, but not 20x
    ◦ Whose efficiency are you measuring?
    ◦ Python can call C/C++ functionS
 • Numeric and Scientific Modules
    ◦ Many numeric/scientific computing modules exist
    ◦ Check Powerpoint for link
    ◦ Don’t reinvent the wheel!

 • NumPy
    ◦ Large collection of modules, Python and C, for performing efficient number computations
       ▸ http://numpy.scipy.org
       ▸ Installation required
          ▹ Includes compiled code, so non-trivial install
    ◦ NumPy — Basic Types
       ▸ N-dimensional arrays
    ◦ Operations
       ▸ Functions that operate on elements of N-dim arrays
       ▸ More efficient than looping through yourself
    ◦ Other features
       ▸ HUGE collection of numerical routines
       ▸ Highlights
          ▹ Array creation, manipulation, indexing, input/output
          ▹ Fast Fourier Transforms
          ▹ Linear Algebra (matrix math)
          ▹ Random samplint
          ▹ Statistics
          ▹ etc.
 • SciPy
    ◦ Large collection for performing scientific computations
    ◦ Installation required
       ▸ Same as NumPy for installation
       ▸ Requires NumPy to work
    ◦ Features
       ▸ Functions for mathematical physics
       ▸ Integration, incl. oridnary differential equations
 • Timing
    ◦ Naive Approach
       ▸ Linux/Mac “time” command
       ▸ Times the entire script
       ▸ Sometimes we want more precision
    ◦ Python timeit module
       ▸ Time at the code or function level
       ▸ Allows repeating code N times
       ▸ Can run from command line or in module
       ▸ Precision is less on Windows
 • Profiling
    ◦ cProfile
       ▸ A profiler describes the run-time performance of a program
       ▸ cProfile is available in Python 2.5 (use ‘profile’ in 2.4)
       ▸ cProfile:
          ▹ can be invoked in your module or from the command line
          ▹ provides detailed output to be imported by pstats
 • Plotting
    ◦ many plotting and graphing modules available
    ◦ many requre NumPy
    ◦ Matplotlib is one of the most common
    ◦ matplotlib common methods
       ▸ plt.plot()  # add data points, can do multiple
       ▸ plt.axis()  # set axes
       ▸ plt.xlabel()# set x-axis label 
       ▸ plt.ylabel()# set y-axis label
       ▸ plt.show()
       ▸ plt.clf()
       ▸ plt.cla()
       ▸ plt.title()
       ▸ plt.subplot


