Lecture 9 - System Interaction

 • The Shell
    ◦ Is a program
    ◦ Is an interpreted scripting language
    ◦ Runs “commands”, but most are separate programs
    ◦ Has variables, control structures, functions
    ◦ Gives control over input and output
    ◦ Supports basic workflows via I/O pipelines (|)
    ◦ Interactive (the command line) or scripted
 • Common Shell Commands
    ◦ Built in: pwd, cd, echo
    ◦ Manual pages: man
    ◦ List files: ls, find
    ◦ Change file privelages: chown, chmod
    ◦ File manipulation: cp, mv, rm, ln, unlink
    ◦ etc
 • The System → Your Script
    ◦ Command-line arguments
    ◦ Environment
       ▸ os.environ: environment variables
       ▸ Readable and writable
 • Your Script → The System
    ◦ Running a Command
       ▸ Runs the given command in a new subshell
          ▹ os.system(‘command’)
       ▸ Command inherits os.environ, etc.
       ▸ Python waits for the command to finish
       ▸ Returns exit status (x 256) from the command
    ◦ Sneaky system() Subtleties
       ▸ Children do not affect parent
    ◦ Return Values and Errors
       ▸ Unix: (exit status x 256) + terminal signal (usu. 0)
       ▸ For a shell command, exit status of 0 is good
 • Problems with os.system()
    ◦ Runs a subshell
       ▸ One more program to run
       ▸ Have to deal with quoting issues
       ▸ May not want subshell to interpret arguments (e.g., >)
       ▸ Potential security issues
    ◦ No input (stdin) or output (stdout, stderr)
       ▸ Waits for input, when command prompts for input
       ▸ All output goes to same place ‘print’ does in Python
       ▸ Myriad complicated solutions
          ▹ os.popen*(), popen2.*, etc.

 • One Module to rule them all
    ◦ subprocess
       ▸ es = subprocess.call(command, shell=True)
          ▹ Like os.system(), except with sensible exit
          ▹ No subshell; command and arguments in list
       ▸ subprocess.Popen() and Output
          ▹ Command and arguments in list... or
          ▹ Add shell=True and then command is one string
          ▹ Standard output and standard error captured
          ▹ Get exit status from returncode attribute
       ▸ Wrapper Functions
 • Exit a script
    ◦ sys.exit(err_code)
       ▸ Quits script immediately with given exit status
       ▸ Defaults to 0, which means success
       ▸ End of script implies sys.exit()


