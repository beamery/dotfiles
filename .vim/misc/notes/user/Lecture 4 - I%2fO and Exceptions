Lecture 4 - I/O and Exceptions

 • Preparing to Read a File
    ◦ my_file = open(filename, ‘r’)
       ▸ filename can be absolute or relative
       ▸ ‘r’ means “read”, is the default, and can be omitted
    ◦ When done with file, close it
       ▸ my_file.close()

 • Reading one line at a time

   for line in file_object:
      # Note: most lines have newline at end
      print line.rstrip(‘\n’)

 • Reading Whole Files
    ◦ line_list = file_object.readlines()
       ▸ One list element per line
       ▸ Trailing newlines on each element

      input = open(‘name-list.txt’)
      lines = input.readlines()
      input.close()

      names = set()
      for line in lines:
         set.add(line.rstrip(‘\n’))

 • Runtime Failures
    ◦ Working with files is particularly prone to throw exceptions
       ▸ Missing file

 • Exception
    ◦ Raised when a run-time failure occurs
    ◦ Allows Python to get out of arbitrarily deep code
    ◦ YOU decide when and where to handle exceptions
    ◦ Can raise your own
    ◦ Exceptions are objects!

 • Handling Exceptions

   try:
      # dangerous codes
   except ExceptionTypeA as e:
      print ‘Caught exceptionA’, e
   except (ExceptionTypeB, ExceptionTypeC) as foo:
      print type(foo)
      print ‘Caught exception B or C:’, foo
   except:
      print ‘Caught another exception
   else:
      print ‘No exception’
   finally:
      print ‘Doing cleanup’
   print ‘Execution continues here’

 • Reading a File Carefully

try:
   input = open(filename)
   data = input.readlines()
   input.close()
except IOError, e:
   print ‘Cannot read’, filename
   print e.strerror

 • Writing a File
    ◦ Prepare to create (or overwrite)
       ▸ output = open(filename, ‘w’)
    ◦ Prepare to append (or create)
       ▸ output = open(filename, ‘a’)
    ◦ Options for writinv data to a file:
       ▸ output.write(‘Must add newline!\n’)
       ▸ output.writelines(list_of_strings)

 • Modules
    ◦ Extra functionality is bundled into modules
    ◦ To use functionality, must import the module
    ◦ Prefix functions or data with module name + dot

 • Standard File Objects
    ◦ sys.sdtin = standard (interactive) input
    ◦ sys.stdout = standart output (default for print)
    ◦ sys.stderr = standard error (alternative output)

 • Directories
    ◦ os.path module
    ◦ Directory contents
       ▸ All entries in directory except . and ..
       ▸ Arbitrary order

 • Shell-like Operations
    ◦ os.mkdir(path, mode)
    ◦ os.makedirs(path, mode)
    ◦ os.remove(path)
    ◦ os.rename(old, new)
    ◦ os.rmdir(path)
    ◦ os.chmod(path, mode)
    ◦ os.chown(path, uid, gid)
    ◦ os.symlink(path, link)
    ◦ os.readlink(path)

 • Other Scrpiting Languages
    ◦ Mgt have similar I/O operations
    ◦ Check for different or additional:
       ▸ Operation names (-d vs isdir() vs. directory?())

