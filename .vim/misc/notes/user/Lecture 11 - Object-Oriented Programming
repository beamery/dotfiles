Lecture 11 - Object-Oriented Programming

 • OO Terminology
    ◦ Class - Blueprint or “factory”
    ◦ Instance - A unique copy of the class
    ◦ “An object is an instance of a class”
 • What are Objects and Classes?
    ◦ Object
       ▸ Collection of related data
       ▸ Actual memory with value(s)
       ▸ Has a ‘type’, which is its class
    ◦ Class
       ▸ Definition of a kind of object
       ▸ Encapsulates data and code
       ▸ Pattern for building an object
       ▸ Contains the functions that work on the data
 • Example Class

      class Student(superclass):
         school = “UW - Madison”

         def is_undergrad(self):
            pass

         def add_class(self, ):
            pass

    ◦ Convention: ‘self’ is first parameter for *all* methods
    ◦ Loading classes is like a cross between modules ad functions
 • Constructor and Destructor

      class Student():
         
         def ___init___(self, id, school=”UW”):
            self.id = id
            self.school = school
         
         def ___del___(self):
            # Do stuff
            # Close files, DB connections, etc
            # Stop processes

 • Instantiating
    ◦ From the same file, foo.py

      class Foo:
         def ___init___(self, begin, end):
            _do something_
         
      instance = Foo(1, 2)

    ◦ From another file

      import foo
      bar = foo.Foo(3, 4)

    ◦ Classes are loaded at runtime like functions
    ◦ Classes load into namespaces like modules

      too_early = Foo # error!

      class Foo():
         print “In Foo!”
         def ___init___(self, begin, end):
            ...

      instance = Foo(1, 2)
      Foo = True
      again = Foo(1, 2) # Error!

 • isinstance()
    ◦ Can be used to test if a variable is an instance of a class

      isinstance(“foo”, str) # True
      isinstance(“foo”, int) # False
      isinstance(“foo”, “bar”) # Error
      isinstance(1, int) # True

 • Using a Class
    ◦ Classes and objects are namespaces!

      s = ‘Hello’ # same as str(‘Hello’)
      l = [] # same as list()

     ◦ Python supports operator overloading

 • Class is a Namespace
    ◦ Like data structures, can nest namespaces
    ◦ Access with a dot

