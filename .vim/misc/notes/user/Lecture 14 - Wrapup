Lecture 14 - Wrapup

 • Uses of Python
    ◦ Quick and dirty programs (number guessing game)
    ◦ User interaction
    ◦ Text-processing (w/ and w/o regexes)
    ◦ Data processing
    ◦ Filesystem operations and system interaction
    ◦ Full-blown applications
    ◦ Prototyping
    ◦ Science and math applications
    ◦ Web
       ▸ Django (like Ruby on Rails)

 • import media
    ◦ media.Foo
 • from media import *
    ◦ Foo
 • Sentence Manipulation
    ◦ a = “The quick brown fox jumped over the lazy dog”
    ◦ a[::-1]

      “ “.join(a.split()[::-1])
         ‘’.join(re.split(r’(\s+), a)[::-1])

 • Filtering

      a = “j23lkn2@#(! “
      re.sub(“\W”, “”, a)

Iterables

   mylist = [1, 2, 3]
   for i in mylist:
      print i

   mylist = [x+x for x in range 3]
   for i in mylist:
      print i


Generators

Yields
 • returns generators

def firstn(n):
   num = 0
   while num < n:
      yeild num
      num += 1

 • used in for loops
   e.g. → for x in firstn(n):
            ...

Command line
 • python -c
    ◦ Run code
 • python -V
    ◦ print version
 • python -t
    ◦ Warn you about inconsistent tab usage
 • python -tt
    ◦ Turn warnings into errors
 • python -3
    ◦ Warns you if you have stuff in python 2 code that won’t work with python 3
 • python —help to see all options
 
Lambda functions

   def f(x): return x***2* 

Sorting

a = [1, 2, 4, 5, 3]

a.sort() # sorts a in place
sorted(a) # returns a sorted version of a

names = {1:’Scot’, 3:’Mat’, 2:’Alain’, 0:’Tim’}
sorted(names) # returns the sorted keys
sorted(names, key=lambda x: names[x]) # sorts by name, but returns just the keys
sorted(names.values()) # just gives us the values
sorted(names.items()) # retain our id’s, but sorts by key
sorted(names,items(), key=lambda x: x[1]) # finally works


